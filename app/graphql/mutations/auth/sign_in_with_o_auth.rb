# frozen_string_literal: true

module Mutations
  module Auth
    class SignInWithOAuth < AuthMutation
      argument :o_auth_data,
               InputObjects::Auth::OAuthSignIn,
               required: true,
               description: 'The OAuth code and provider to attempt sign in with'

      argument :csrf_token,
               InputObjects::CsrfToken,
               required: true,
               description: 'Token generated by the api to prevent CSRF attacks'

      description 'Verifies an OAuth Code and returns a Signed JWT to authenticate the User'
      authenticated false

      field :jwt,
            String,
            null: true,
            description: 'A Signed JWT used to authenticate a User'

      def resolve(o_auth_data:, csrf_token:)
        return error('Invalid CSRF Token') unless validate_csrf(csrf_token)

        user = get_user_from_code(o_auth_data)
        return oauth_failure(user[:error], o_auth_data[:provider_name]) if user.is_a? Hash
        return errors_for(user) if user.errors.any?

        jwt_if_authticatable(user)
      end

      private

      def validate_csrf(csrf_token)
        CsrfToken.validate_and_consume(
          client_token_id: csrf_token[:client_token_id],
          token: csrf_token[:token],
          token_type: :oauth
        )
      end

      def oauth_failure(reason, kind)
        error(
          I18n.t(
            'devise.omniauth_callbacks.failure',
            reason:,
            kind:
          )
        )
      end

      def get_user_data(code, provider)
        token = provider.get_token(code)
        return if token.nil?

        data = provider.get_user(token)
        return if data[:id].nil? || data[:email].nil?

        data
      end

      def get_user_from_code(o_auth_data)
        provider = valid_providers[o_auth_data[:provider_name]]&.new
        return { error: 'Unknown Provider' } if provider.nil?

        user_data = get_user_data(o_auth_data[:code], provider)
        return { error: 'OAuth Authentication Failed' } if user_data.nil?

        User.from_oauth(user_data, provider)
      end

      def valid_providers
        [
          AuthProviders::Google,
          AuthProviders::Patreon
        ].index_by(&:provider_name)
      end
    end
  end
end
